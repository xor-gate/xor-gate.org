Introduction to Golang
As an alternative to C & C++
8 Oct 2019
Tags: golang, c, c++

[[https://xor-gate.org][Jerry Jacobs]]
Software Engineer, [[https://heliox.nl][Heliox]]
jerry.jacobs@heliox.nl

* Welcome!

.image introduction-to-golang/golang-logo.png
.image introduction-to-golang/golang-mascot.jpg

* Introducing myself

- Installed [[https://en.wikipedia.org/wiki/Ubuntu_version_history#Ubuntu_5.10_(Breezy_Badger)][Ubuntu 5.10 long time ago]]
- Open-source enthousiast for +14 years
- Highly-experienced with UNIX-like environments
- Programming C and other languages for +10 years
- Big love for Embedded Systems
- Deployed Go in production systems for 2.5 years (Custom IoT Cloud Platform)

* Agenda

- History
- Introduction of the language
- Pros and cons compared to C/C++
- Deep dive
- Workshop with Q&A

* History

.image introduction-to-golang/golang-history-timeline.svg

* Why a new language?

- Long build times
- Tools are slow
- Dependencies are uncontrolled
- Machines have stopped getting faster
- Language bloat

* Language features

- Open Source
- High-speed compilation
- The efficiency of a statically-typed compiled language with the ease of programming of a dynamic language
- [[https://www.youtube.com/watch?v=rFejpH_tAHM][Simple language]], easy to read and easy to write: [[https://talks.golang.org/2015/simplicity-is-complicated.slide][Simplicity!]].
- No libc (or libc++)
- [[https://en.wikipedia.org/wiki/Type_system#Static_type_checking][Staticly typed]] and staticly compiled (no "slow" [[https://en.wikipedia.org/wiki/Virtual_machine][VM]], like Java or Python)
- Safety: type-safe and memory-safe
- Good support for [[https://www.youtube.com/watch?v=cN_DpYBzKso][concurrency]] and communication
- Efficient, latency-free [[https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)][garbage collection]]
- Cross-compile is easy: [[https://github.com/golang/go/wiki/GoArm][GOARCH=arm GOOS=linux]]

* Modern software practices

The language and toolchain contains support for modern programming practices

- Documentation ([[https://golang.org/pkg/cmd/go/internal/doc/][go doc]])
- Unit testing ([[https://golang.org/pkg/cmd/go/internal/test/][go test]])
- Performance benchmarking ([[https://golang.org/pkg/cmd/go/internal/test/][go test -bench]])
- [[https://en.wikipedia.org/wiki/Race_condition][Race condition]] testing ([[https://golang.org/pkg/cmd/go/internal/test/][go test -race]])
- Code generation ([[https://golang.org/pkg/cmd/go/internal/generate/][go generate]])

* Hello World!

.code -numbers introduction-to-golang/hello.go

Run the program:

  $ go run hello.go

* Pros and cons compared to C/C++

*Pros*

- Modern simple language
- Advanced toolchain, simple to use
- No [[https://en.wikipedia.org/wiki/Undefined_behavior][undefined behaviour]] in [[https://golang.org/ref/spec][the specification]]

*Cons*

- Not designed for deep embedded systems (needs an OS)
- Runtime runs only on major and latest supported Operating Systems
- Language not standarized (like C11 has ISO/IEC 9899:2011)

* Pros and cons of tooling

C/C++ is just a language specification, needs many tools and scripts

- Compiler toolchain, e.g GCC or clang (LLVM)
- Documentation generator (Doxygen)
- Code coverage tool, e.g gcov or lcov
- Build and dependency system

Go has just a single tool
    `go`

* Uncovered topics

- Dependency management
- Concurrency

* Deep dive

* standard library

Go has an excellent [[https://golang.org/pkg/][standard library]]

- [[https://godoc.org/encoding/hex][encoding/hex]]
- [[https://godoc.org/encoding/json][encoding/json]]

* general

.code -numbers introduction-to-golang/hello.go

* values and variables

.code -numbers introduction-to-golang/hello.go

* switch

.code -numbers introduction-to-golang/hello.go

* interface

.code -numbers introduction-to-golang/hello.go

* 

* Workshop & Q&A

* Getting your hands dirty

[[https://gobyexample.com][Go by example]]

* Thank you!
