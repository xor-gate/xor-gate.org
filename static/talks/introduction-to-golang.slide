Introduction to Golang
Scratching the surface
3 Dec 2019
Tags: golang, c, c++

[[https://xor-gate.org][Jerry Jacobs]]
Software Engineer, [[https://heliox.nl][Heliox]]
jerry.jacobs@heliox.nl

* Welcome!

- Presentation can be found on [[https://xor-gate.org][xor-gate.org]]

.image introduction-to-golang/golang-logo.png

* Introducing myself

- Installed [[https://en.wikipedia.org/wiki/Ubuntu_version_history#Ubuntu_5.04_(Hoary_Hedgehog)][Ubuntu 5.04 long time ago]]
- Open-source & Linux enthousiast for +14 years
- Highly-experienced with UNIX-like environments
- Programming C and other languages for +10 years
- Self-learning Go since Dec 2015
- Deployed Go in production systems +2.5 years

* Agenda

- History
- Introduction of the language
- Pros and cons compared to C/C++
- Language howto
- Workshop with Q&A

* History

.image introduction-to-golang/golang-history-timeline.svg

* Intro: Why a new language?

- Long build times
- Tools are slow
- Dependencies are uncontrolled
- Machines have stopped getting faster
- Language bloat

* Language features

- Open Source
- High-speed compilation
- The efficiency of a statically-typed compiled language with the ease of programming of a dynamic language
- [[https://www.youtube.com/watch?v=rFejpH_tAHM][Simple language]], easy to read and easy to write: [[https://talks.golang.org/2015/simplicity-is-complicated.slide][Simplicity!]].
- No libc (or libc++)
- [[https://en.wikipedia.org/wiki/Type_system#Static_type_checking][Staticly typed]] and staticly compiled (no "slow" [[https://en.wikipedia.org/wiki/Virtual_machine][VM]], like Java or Python)
- Safety: type-safe and memory-safe
- Good support for [[https://www.youtube.com/watch?v=cN_DpYBzKso][concurrency]] and communication
- Efficient, latency-free [[https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)][garbage collection]]
- Cross-compile is easy: [[https://github.com/golang/go/wiki/GoArm][GOARCH=arm GOOS=linux]]

* Modern software practices

The language and toolchain contains support for modern programming practices

- Code formatting ([[https://golang.org/cmd/gofmt/][gofmt]])
- Documentation ([[https://golang.org/cmd/doc/][go doc]])
- Unit testing ([[https://golang.org/cmd/go/#hdr-Testing_flags][go test]])
- [[https://en.wikipedia.org/wiki/Race_condition][Race condition]] testing ([[https://golang.org/cmd/go/#hdr-Testing_flags][go test -race]])
- Performance benchmarking ([[https://golang.org/cmd/go/#hdr-Testing_flags][go test -bench]])
- Static analysis ([[https://golang.org/cmd/vet/][go vet]])
- Code generation ([[https://golang.org/cmd/go/#hdr-Generate_Go_files_by_processing_source][go generate]])

* Pros and cons compared to C/C++

*Pros*

- Modern simple language
- Advanced toolchain, simple to use
- No [[https://en.wikipedia.org/wiki/Undefined_behavior][undefined behaviour]] in [[https://golang.org/ref/spec][the specification]]

*Cons*

- Not designed for deep embedded systems (needs an OS)
- Runtime runs only on major and latest supported Operating Systems
- Language not standarized (like C11 has ISO/IEC 9899:2011)

* Pros and cons compared to C/C++

C/C++ is just a language specification, needs many tools

- Compiler toolchain, e.g GCC or Clang
- Documentation generator, e.g Doxygen
- Code coverage tool, e.g gcov or lcov
- Build and dependency system, e.g cmake

Go has just a single tool

    go

* Who uses it?

- [[https://github.com/google?language=go][Google]]
- [[https://github.com/bolcom?language=go][Bol.com]]
- [[https://github.com/uber?language=go][Uber]]
- [[https://github.com/netflix?language=go][Netflix]]
- [[https://github.com/dropbox?language=go][Dropbox]]
- [[https://github.com/digitalocean?language=go][Digital Ocean]]
- [[https://github.com/golang/go/wiki/GoUsers][And the list goes on]]...

* Language howto 

* standard library

Go has an excellent [[https://golang.org/pkg/][standard library]]

- Encoding; hex, json, base64
- Compression; tar, zip, bzip2
- Networking; tcp, udp, http, rpc
- Crypto; aes, sha256
- And many many more

* Language Organization

- [[https://golang.org/ref/spec#Source_code_representation][Source code and strings are Unicode text]] encoded in UTF-8
- Code is [[https://golang.org/doc/code.html][organized]] in [[https://golang.org/ref/spec#Packages][packages]]
- [[https://golang.org/ref/spec#Interface_types][Interface]] is implicit by [[https://golang.org/ref/spec#Method_sets][method set]]
- Go has no public/private keyword, just use uppercase for [[https://golang.org/ref/spec#Exported_identifiers][exporting identifiers]]
- Built-in support for [[https://gobyexample.com/multiple-return-values][multiple return values]]

* Hello World!

.play -numbers -edit introduction-to-golang/hello.go

Compile and run:

  $ go run hello.go

* Values and variables

.play -numbers -edit introduction-to-golang/values-and-variables.go

* Flow control: for

.play -numbers -edit introduction-to-golang/for.go

* Flow control: if/else

.play -numbers -edit introduction-to-golang/if-else.go

* Flow control: switch

.play -numbers -edit introduction-to-golang/switch.go

* Data structures: array & slice

.play -numbers -edit introduction-to-golang/array-and-slice.go

* Data structures: struct

.play -numbers -edit introduction-to-golang/struct.go

* Data structures: map

.play -numbers -edit introduction-to-golang/map.go

* Pointers

.play -numbers -edit introduction-to-golang/pointers.go

* Methods & interfaces

.play -numbers -edit introduction-to-golang/methods-and-interfaces.go

* Workshop & Q&A

* Ideas?

- [[https://tour.golang.org/][A Tour of Go]]
- Reading JSON/XML/JSON/YAML files
- Program a TCP/Websocket server
- [[https://gowebexamples.com/json/][HTTP server with JSON API]]

Playing around on [[https://play.golang.org/][play.golang.org]]

* More information

- [[https://blog.golang.org/index][blog.golang.org]]
- [[https://talks.golang.org][talks.golang.org]]
- [[https://awesome-go.com/][awesome-go.com]]
- [[https://gobyexample.com/][Go by example.com]]
- [[https://yourbasic.org/golang/][Go go-to guide]]
- [[https://learn.go.dev][Learn - Go.dev]]

* More information (2)

- [[https://www.golang-book.com/books/intro][An Introduction to Programming in Go]]
- [[https://youtube.com/c/justforfunc][JustForFunc: Programming in Go]]
- [[https://tinygo.org][TinyGo]]
- [[https://gobot.io][Gobot]]
- [[https://embd.kidoman.io][Golang embedded framework]]
- [[https://github.com/topics/go][Github.com Go Topic]]
